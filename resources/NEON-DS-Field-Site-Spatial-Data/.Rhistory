?BIC
?rnoaa
??rnoaa
library(rnoaa)
install.packages("rnoaa")
library(rnoaa)
station_data <- ghcnd_stations() # Takes a while to run
install.packages(rnoaa)
library(rnoaa)
install.packages("rnoaa")
library("rnoaa")
station_data <- ghcnd_stations() # Takes a while to run
knitr::opts_chunk$set(echo = TRUE)
install.packages("sp")
install.packages("data.table")
install.packages("rgdal")
install.packages("ggplot2")
library(sp)
library(data.table)
library(rgdal)
library(ggplot)
getRversion()
RStudio.Version()$version
RStudio.Version()$version
getRversion()
install.packages("installr")
library(installr)
updateR()
gc()
install.packages("tmap")
library(tmap)
data(world)
data(metro)
data("World")
wordl
World
view(World)
View(world)
View(World)
qtm(World)
qtm(world, fill = "continent")
qtm(World, fill = "continent")
qtm(World, fill ="pop_est_dens")
tm_shape(World) +
tm_plygons("pop_est_dens"m palette = "Blues")
tm_shape(World) +
tm_plygons("pop_est_dens", palette = "Blues")
tm_shape(World) +
tm_polygons("pop_est_dens", palette = "Blues")
tmaptools::palette_explorer()
package.install("shiny")
install.packages("shiny")
tm_shape(World) +
tm_polygons("pop_est_dens", palette = "Blues")
tmaptools::palette_explorer()
install.packages("shinyjs")
tmaptools::palette_explorer()
tm_shape(World) +
tm_polygons("pop_est_dens", palette = "-magma", style = "cont")
tmap_mode("view")
tm_shape(World) +
tm_polygons("pop_est_dens", palette = "-magma", style = "cont")
tm_shape(World) +
tm_polygons("pop_est_dens", palette = "-magma", style = "cont", popup.vars = TRUE)
tm <- tm_shape(World) +
tm_polygons("pop_est_dens", palette = "-magma", style = "cont", popup.vars = TRUE) +
tm_dots()
view(tm)
View(tm)
tm
tm_shape(metro)
tm_shape(metro) +
tm_dots("")
tm_shape(metro) +
tm_dots("Blue")
tm_shape(metro) +
tm_dots("blue")
tmap_mode("view")
tmap_mode("plot")
tm_shape(metro) +
tm_dots("blue")
tm_shape(metro) +
tm_polygons
tm_dots("blue")
tm_shape(metro) +
tm_polygons("pop2020")
tm_dots("blue")
tm_shape(metro) +
tm_polygons("pop2020") +
tm_dots("blue")
tm_shape(metro) +
tm_dots("blue")
tm_shape(World) +
tm_shape(metro) +
tm_dots("blue")
tm_shape(World) +
tm_shape(metro) +
tm_dots("blue")
tm_shape(World)
tm_shape(World)+
tm_polygons()
tm_shape(metro) +
tm_dots("blue")
tm_shape(metro) +
tm_bubbles(size= "pop2020", col = "pop2020") +
tm_layout(legend.outside = TRUE)
tm_shape(World) +
tm_polygons("grey") +
tm_bubbles(size = "pop2020", col = "pop2020", style = "kmeans")+
tm_layout(legend.outside = TRUE) +
tm_compass()
tm_shape(World) +
tm_polygons("grey") +
tm_bubbles(size = "pop2020", col = "pop2020", style = "kmeans")+
tm_layout(legend.outside = TRUE)
tm_shape(World) +
tm_polygons("grey") +
tm_shape(metro) +
tm_bubbles(size = "pop2020", col = "pop2020", style = "kmeans")+
tm_layout(legend.outside = TRUE)
tm_shape(World) +
tm_polygons("grey") +
tm_shape(metro) +
tm_bubbles(size = "pop2020", col = "pop2020", style = "kmeans")+
tm_compass()
tm_shape(World) +
tm_polygons(c("pink", "red"))
tm_mode(view)
tmap_mode(view)
tm_shape(World) +
tm_polygons(c("pink", "red"))
tmap_mode("view")
tm_shape(World) +
tm_polygons(c("pink", "red"))
tm_shape(World) +
tm_polygons(c("pink", "red"))+
tm_dots(metro)
tm_shape(World) +
tm_polygons(c("pink", "red")+
tm_dots(metro)
tm_shape(World) +
tm_polygons(c("pink", "red")+
tm_dots(metro)
tm_shape(World) +
tm_polygons(c("pink", "red")+
tm_shape(metro) +
tm_dots("blue")
tm_shape(World) +
tm_polygons(c("pink", "red")+
tm_shape(metro) +
tm_dots("blue")
tm_shape(World) +
tm_polygons(c("pink", "red")+
tm_shape(metro) +
tm_dots()
factorial(10)
factorial(100)
factorial(1000)
factorial(999)
factorial(200)
factorial(100)
factorial(101)
factorial(190)
factorial(150)
factorial(170)
factorial(180)
factorial(175)
factorial(171)
factorial(170)
factorial(170.1)
factorial(170.2)
factorial170.9
factorial(170.9)
factorial(170.5)
factorial(170.8)
factorial(170.7)
factorial(170.6)
factorial(170.69)
factorial(170.68)
factorial(170.67)
factorial(170.66)
factorial(170.65)
factorial(170.64)
factorial(170.63)
factorial(170.62)
factorial(170.61)
factorial(170.619)
factorial(170.618)
factorial(170.617)
factorial(170.616)
factorial(170.615)
factorial(170.614)
factorial(170.6147)
factorial(170.6145)
factorial(170.6143)
factorial(170.6144)
factorial(170.6145)
factorial(170.61445)
factorial(170.61446)
factorial(170.61447)
factorial(170.61448)
factorial(170.614476)
factorial(170.614477)
factorial(170.614478)
factorial(170.614479)
factorial(170.6144785)
factorial(170.6144786)
factorial(170.6144787)
factorial(170.6144788)
factorial(170.6144789)
factorial(170.61447888)
factorial(170.61447887)
sample(7)
sample(letters, 19)
n<-100
r<-replicate(10^4,sum(sample(n)==(1:n)))
sum(r>=1)/10^4
a=0.3
b=0.7
a1=1
a2=1
x1=4
x2=2
b1=0.7
b2=0.3
u=(x1-a1)^b1 * (x2-a2)^b2
plot(u,x1)
# Library
library(plotly)
# Data: volcano is provided by plotly
# Plot
p <- plot_ly(z = volcano, type = "surface")
p
# Library
install.packages(plotly)
# Library
install.packages("plotly")
library(plotly)
# Plot
p <- plot_ly(z = volcano, type = "surface")
p
volcano
v<-volcano
View(v)
View(p)
# Plot
p <- plot_ly(z = v, type = "surface")
p
setwd("C:/Users/mathias/Desktop/NEON-DS-Field-Site-Spatial-Data")
library(raster)
library(sp)
library(rgdal)
install.packages("raster")
install.packages("raster")
library(raster)
install.packages("sp")
install.packages("sp")
library(sp)
install.packages("rgdal")
library(rgdal)
install.packages("maptools")
library(maptools)
install.packages(rgeos)
library(rgeos)
install.packages("rgeos")
library(rgeos)
library(dplyr)
library(ggplot2)
# read in plot centroids
centroids <- readr::read_csv(paste0("SJER/PlotCentroids/SJERPlotCentroids.csv"))
str(centroids)
# read in vegetation heights
vegStr <- readr::read_csv(paste0("SJER/VegetationData/D17_2013_vegStr.csv"))
str(vegStr)
# plot raster
plot(chm, main="Lidar Canopy Heights Model \n SJER, California")
# import digital terrain model
chm <- rastr(paste0("SJER/CHM_SJER.tif"))
# plot raster
plot(chm, main="Lidar Canopy Heights Model \n SJER, California")
# import digital terrain model
chm <- raster(paste0("SJER/CHM_SJER.tif"))
# import digital terrain model
chm <- raster::raster(paste0("SJER/CHM_SJER.tif"))
# plot raster
plot(chm, main="Lidar Canopy Heights Model \n SJER, California")
myCol <- terrain.colors(6)
plot(chm, col=myCol, main="Plot & Tree Locations", breaks=c(-2,0,2,10,40))
#plot square around centroid
points(centroid$easting, centroid$northing, pch=0, cex=2)
#plot square around centroid
points(centroids$easting, centroids$northing, pch=0, cex=2)
#plot location of each tree measured
points(vegStr$easting, vegStr$northing, pch=19, cex=0.5, col=2)
# check CHM crs
chm@crs
## create a SpatialPointsDataFrame
# specify the easting (column 4) and northing (column 3) in that order
# specify CRS proj4string: borrow CRS from chm
#specify raster
centroid_spdf <- SpatialPointsDataFrame(centroids[,4:3]), proj4string=chm@crs, centroids)
dim(centroids)
## create a SpatialPointsDataFrame
# specify the easting (column 4) and northing (column 3) in that order
# specify CRS proj4string: borrow CRS from chm
#specify raster
centroid_spdf <- SpatialPointsDataFrame(centroids[,4:3], proj4string=chm@crs, centroids)
# check centroid crs
# note SPDFs do not have a crs slot so 'object@crs' won't work
centroid_spdf
cent_max <- raster::extract(chm,
centroid_spdf,  # SPDF with centroids for buffer)
buffer = 20,    # buffer, sice, units depend on CRS
fun=max,        # what value to extract
df=TRUE)        # return a data frame?
cent_max
# grap the names of the plots from the centroid spdf
cent_max$plot_id <- centroid_spdf$Plot_ID
# fix the column names
names(cent_max) <- c("ID", "chmMaxHeight", "plot_id")
cent_max
# merge the chm data into the centroids data.frame
centroids <- merge(centroids, cent_max, by.x = "plot_ID", by.y = "plot_id")
# merge the chm data into the centroids data.frame
centroids <- merge(centroids, cent_max, by.x = plot_ID, by.y = plot_id)
# merge the chm data into the centroids data.frame
centroids <- merge(centroids, cent_max, by.x = Plot_ID, by.y = plot_id)
# merge the chm data into the centroids data.frame
centroids <- merge(centroids, cent_max, by.x = 'Plot_ID', by.y = 'plot_id')
head(centroids)
# Instead of only taking the max-height, extract all
cent_heightList <- raster::extract(chm, centroid_spdf, buffer =20)
for (in 1:5){
hist(cent_heightList[[i]], main=(paste("plot", i)))
}
# Instead of only taking the max-height, extract all
cent_heightList <- raster::extract(chm, centroid_spdf, buffer =20)
for (in 1:5){
hist(cent_heightList[[i]], main=(paste("plot",i)))
}
for (i in 1:5){
hist(cent_heightList[[i]], main=(paste("plot",i)))
}
for (i in 1:18){
par(mfrow=c(6,3))
hist(cent_heightList[[i]], main=(paste("plot",i)))
}
for (i in 1:18){
hist_i <- hist(cent_heightList[[i]], main=(paste("plot",i)))
}
View(hist_i)
hist_i[1]
hist_i
view(hist_i)
View(hist_i)
plot(hist_i)
plot(hist_i)
#create histograms for the first 5 plots of data using a for loop
par(mfrow=c(6,3))
for (i in 1:18){
hist(cent_heightList[[i]], main=(paste("plot",i)))
}
# find max stem height for eachplot
maxStemHeight_d <- vegStr %>%
group_by(plotid) %>%
summarise(max = max(stemheight))
head(maxStemHeight_d)
# fix names
names(maxStemHeight_d) <-c("plotid", "insituMaxHeight")
head(maxStemHeight_d)
# one line of nested commands, 95% height value
insitu_d <- vegStr %>%
filter(plotid %in% centroids$Plot_ID) %>%
group_by(plotid) %>%
summarise(max = max(stemheight), quant = quantile(stemheight, .95))
head(insitu_d)
# merge insitu data into the centroids data.frame
centroids <- merge(centroids, maxStemHeight, by.x ='Plot_ID', by.y = 'plotid')
# merge insitu data into the centroids data.frame
centroids <- merge(centroids, maxStemHeight_d, by.x ='Plot_ID', by.y = 'plotid')
head(centroids)
8.8-5.69
dim(centroids)
head[,9] <- centroids$chmMaxHeight-centroids$insituMaxHeight
centroids[,9] <- centroids$chmMaxHeight-centroids$insituMaxHeight
head(centroids)
centroids[,9] <- centroids$chmMaxHeight-centroids$insituMaxHeight, name=("diff")
centroids[,9] <- centroids$insituMaxHeight-centroids$chmMaxHeight
name(centroids[,9])<-"diff"
names(centroids[,9])<-("diff")
head(centroids)
names(centroids[,9])<-"diff"
head(centroids)
names(centroids$V9) = "diff"
head(centroids)
ggplot(centroids,aes(x=chmMaxShape, y =insituMaxHeight )) +
geom_abline(slope=1, intercept = 0, alpha=.5, lty=2)+ # plotting our "1:1" line
geom_point() +
theme_bw() +
ylab("Maximum measured height") +
xlab("Maximum lidar pixel")
ggplot(centroids,aes(x=chmMaxHeight, y =insituMaxHeight )) +
geom_abline(slope=1, intercept = 0, alpha=.5, lty=2)+ # plotting our "1:1" line
geom_point() +
theme_bw() +
ylab("Maximum measured height") +
xlab("Maximum lidar pixel")
ggplot(centroids, aes(x=chmMaxHeight, y=insituMaxHeight)) +
geom_abline(slope=1, intercept=0, alpha=.5, lty=2) + #plotting our "1:1" line
geom_point() +
geom_smooth(method = lm) + # add regression line and confidence interval
ggtitle("Lidar CHM-derived vs. Measured Tree Height") +
ylab("Maximum Measured Height") +
xlab("Maximum Lidar Hright") +
theme(panel.background = element_rect(colour = "grey"),
plot.title = element_text(family="sans", face="bold", size=20, vjust=1.19),
axis.title.x = element_text(family="sans", face="bold", size=14, angle=00, hjust=0.54, vjust=-.2),
axis.title.y = element_text(family="sans", face="bold", size=14, angle=90, hjust=0.54, vjust=1))
ggplot(centroids, aes(x=chmMaxHeight, y=insituMaxHeight)) +
geom_abline(slope=1, intercept=0, alpha=.5, lty=2) + #plotting our "1:1" line
geom_point() +
geom_smooth(method = lm) + # add regression line and confidence interval
ggtitle("Lidar CHM-derived vs. Measured Tree Height") +
ylab("Maximum Measured Height") +
xlab("Maximum Lidar Height") +
theme(panel.background = element_rect(colour = "grey"),
plot.title = element_text(family="sans", face="bold", size=20, vjust=1.19),
axis.title.x = element_text(family="sans", face="bold", size=14, angle=00, hjust=0.54, vjust=-.2),
axis.title.y = element_text(family="sans", face="bold", size=14, angle=90, hjust=0.54, vjust=1))
